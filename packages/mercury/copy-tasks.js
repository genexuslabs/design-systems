import path from "path";
import * as fs from "fs";

/*
Steps:

Step 1: Copy './src/assets' to './dist/assets', except from '_generated' directory
(we don't want '_generated' in the /dist, only the folders inside '_generated')

Step 2: Copy './src/assets/icons/_generated/*' to './dist/assets/icons/'

Step 3: Copy the icons to '.showcase/icons' as well so that the showcase folder can
be distributed with its own icons, independently of '.dist/assets/icons'
*/

// note: SVG_SASS_GENERATOR_GENERATED_FOLDER is a fixed directory generated by @genexus/svg-sass-generator

const SVG_SASS_GENERATOR_GENERATED_FOLDER = "_generated";
const ASSETS_SRC = "./src/assets/";
const ASSETS_DIST = "./dist/assets/";
const GENERATED_ICONS_PATH = path.join(
  ASSETS_SRC,
  `icons/${SVG_SASS_GENERATOR_GENERATED_FOLDER}`
);
const DIST_ICONS_PATH = path.join(ASSETS_DIST, "icons");
const SHOWCASE_PATH = "./showcase";

// Copy Assets
const copyFolderSync = (source, target) => {
  if (!fs.existsSync(target)) {
    fs.mkdirSync(target, { recursive: true });
  }

  const items = fs.readdirSync(source);

  items.forEach(item => {
    const sourcePath = path.join(source, item);
    const targetPath = path.join(target, item);

    if (item === SVG_SASS_GENERATOR_GENERATED_FOLDER) {
      console.log(`Skipping folder: ${sourcePath}`);
      return; // Skip the folder
    }

    if (fs.lstatSync(sourcePath).isDirectory()) {
      // Copy folder recursively
      copyFolderSync(sourcePath, targetPath);
    } else {
      // Copy file
      fs.copyFileSync(sourcePath, targetPath);
    }
  });
};

// Step 1:
copyFolderSync(ASSETS_SRC, ASSETS_DIST);
// Step 2
copyFolderSync(GENERATED_ICONS_PATH, DIST_ICONS_PATH);
// Step 3
copyFolderSync(
  GENERATED_ICONS_PATH,
  path.join(SHOWCASE_PATH, "assets", "icons")
);

console.log("copy-task.js copied successfully");
