@mixin button-common-styles() {
  display: inline-grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  justify-content: center;
}

@mixin label-common-styles() {
  display: inline-grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  grid-template-rows: auto; // Necessary to avoid creating additional rows and then adding additional gap at the bottom of the label
  align-items: center;
}

@mixin document-common-styles() {
  display: grid;
  grid-template-rows: 1fr;
  min-block-size: 100dvh;
  margin: 0;
}

// - - - - - - - - - - - - - - - - - - - -
//    Icons | Mask & Background
// - - - - - - - - - - - - - - - - - - - -

// Icon mask styles
@mixin icon-mask-common-styles(
  $inline-size: var(--icon-size),
  $block-size: var(--icon-size),
  $mask-size: var(--icon-mask-size)
) {
  content: "";
  display: block;
  inline-size: $inline-size;
  block-size: $block-size;
  -webkit-mask: no-repeat center / $mask-size var(--icon-path);
  background-color: currentColor;
}

%icon-mask--before {
  @include icon-mask-common-styles(
    $inline-size: var(--mer-icon__box--sm),
    $block-size: var(--mer-icon__box--sm),
    $mask-size: 100%
  );
}

@mixin icon-mask($selector: ".icon-mask", $icon-path: null) {
  #{$selector} {
    @if $icon-path != null {
      --icon-path: #{$icon-path};
    }
    &::before {
      @extend %icon-mask--before;
    }
  }
}

// Icon background styles
@mixin icon-background-common-styles(
  $inline-size: var(--icon-size),
  $block-size: var(--icon-size),
  $background-size: var(--icon-background-size)
) {
  content: "";
  display: block;
  inline-size: $inline-size;
  block-size: $block-size;
  background: no-repeat center / $background-size var(--icon-path);
}

%icon-background--before {
  @include icon-background-common-styles(
    $inline-size: var(--mer-icon__box--sm),
    $block-size: var(--mer-icon__box--sm),
    $background-size: 100%
  );
}

@mixin icon-background($selector: ".icon-background", $icon-path: null) {
  #{$selector} {
    @if $icon-path != null {
      --icon-path: #{$icon-path};
    }
    &::before {
      @extend %icon-background--before;
    }
  }
}

// - - - - - - - - - - - - - - - - - - - -
//      Icons | Monochrome Selectors
// - - - - - - - - - - - - - - - - - - - -

// Single selector generator
@mixin generate-monochrome-icon-selector(
  $input-selector,
  $output-selector,
  $light-theme-selector: ".light",
  $dark-theme-selector: ".dark",
  $light: true,
  $dark: true,
  $primary: true,
  $primary-hover: true,
  $primary-active: true,
  $primary-disabled: true,
  $on-primary: true,
  $on-primary-hover: true,
  $on-primary-active: true,
  $on-disabled: true,
  $neutral: true
) {
  // Light
  @if $light {
    #{$light-theme-selector} {
      #{$output-selector} {
        // primary
        @if $primary {
          &--primary {
            @extend #{$input-selector}--primary-light !optional;
          }
        }
        @if $primary-hover {
          &--primary-hover,
          &--primary:hover {
            @extend #{$input-selector}--primary-hover-light !optional;
          }
        }
        @if $primary-active {
          &--primary-active,
          &--primary:active {
            @extend #{$input-selector}--primary-active-light !optional;
          }
        }
        @if $primary-disabled {
          &--primary-disabled,
          &--primary:disabled {
            @extend #{$input-selector}--primary-disabled-light !optional;
          }
        }
        // on primary
        @if $on-primary {
          &--on-primary {
            @extend #{$input-selector}--on-primary-light !optional;
          }
        }
        @if $on-primary-hover {
          &--on-primary-hover,
          &--on-primary:hover {
            @extend #{$input-selector}--on-primary-hover-light !optional;
          }
        }
        @if $on-primary-active {
          &--on-primary-active,
          &--on-primary:active {
            @extend #{$input-selector}--on-primary-active-light !optional;
          }
        }
        // on disabled
        @if $on-disabled {
          &--on-disabled {
            @extend #{$input-selector}--on-disabled-light !optional;
          }
        }
        // neutral
        @if $neutral {
          &--neutral {
            @extend #{$input-selector}--neutral-light !optional;
          }
        }
      }
    }
  }

  // Dark
  @if $dark {
    #{$dark-theme-selector} {
      #{$output-selector} {
        // primary
        @if $primary {
          &--primary {
            @extend #{$input-selector}--primary-dark !optional;
          }
        }
        @if $primary-hover {
          &--primary-hover,
          &--primary:hover {
            @extend #{$input-selector}--primary-hover-dark !optional;
          }
        }
        @if $primary-active {
          &--primary-active,
          &--primary:active {
            @extend #{$input-selector}--primary-active-dark !optional;
          }
        }
        @if $primary-disabled {
          &--primary-disabled,
          &--primary:disabled {
            @extend #{$input-selector}--primary-disabled-dark !optional;
          }
        }
        // on primary
        @if $on-primary {
          &--on-primary {
            @extend #{$input-selector}--on-primary-dark !optional;
          }
        }
        @if $on-primary-hover {
          &--on-primary-hover,
          &--on-primary:hover {
            @extend #{$input-selector}--on-primary-hover-dark !optional;
          }
        }
        @if $on-primary-active {
          &--on-primary-active,
          &--on-primary:active {
            @extend #{$input-selector}--on-primary-active-dark !optional;
          }
        }
        // on disabled
        @if $on-disabled {
          &--on-disabled {
            @extend #{$input-selector}--on-disabled-dark !optional;
          }
        }
        // neutral
        @if $neutral {
          &--neutral {
            @extend #{$input-selector}--neutral-dark !optional;
          }
        }
      }
    }
  }
}

// Monochrome
@mixin process-monochrome-icons-list(
  $monochrome-icon-selectors,
  $light: true,
  $dark: true,
  $light-theme-selector: ".light",
  $dark-theme-selector: ".dark",
  $primary: true,
  $primary-hover: true,
  $primary-active: true,
  $primary-disabled: true,
  $on-primary: true,
  $on-primary-hover: true,
  $on-primary-active: true,
  $on-disabled: true,
  $neutral: true
) {
  @each $monochrome-icon-selector in $monochrome-icon-selectors {
    @include generate-monochrome-icon-selector(
      $input-selector: #{$monochrome-icon-selector},
      $output-selector: str-replace($monochrome-icon-selector, "%", "."),
      $light: $light,
      $dark: $dark,
      $light-theme-selector: $light-theme-selector,
      $dark-theme-selector: $dark-theme-selector,
      $primary: $primary,
      $primary-hover: $primary-hover,
      $primary-active: $primary-active,
      $primary-disabled: $primary-disabled,
      $on-primary: $on-primary,
      $on-primary-hover: $on-primary-hover,
      $on-primary-active: $on-primary-active,
      $on-disabled: $on-disabled,
      $neutral: $neutral
    );
  }
}

// - - - - - - - - - - - - - - - - - - - -
//     Icons | Multicolor Selectors
// - - - - - - - - - - - - - - - - - - - -

// Single selector generator
@mixin multicolor-icon-selector(
  $input-selector,
  $output-selector,
  $light: true,
  $dark: true,
  $light-theme-selector: ".light",
  $dark-theme-selector: ".dark",
  $primary: true,
  $primary-hover: true,
  $primary-active: true,
  $primary-disabled: true,
  $on-primary: true,
  $on-primary-hover: true,
  $on-primary-active: true,
  $on-disabled: true,
  $neutral: true
) {
  // Light
  @if $light {
    #{$light-theme-selector} {
      #{$output-selector} {
        @if $enabled {
          @extend #{$input-selector}--enabled-light;
        }

        @if $hover {
          &:hover {
            @extend #{$input-selector}--hover-light;
          }
        }

        @if $active {
          &:active {
            @extend #{$input-selector}--active-light;
          }
        }

        @if $disabled {
          &:disabled {
            @extend #{$input-selector}--disabled-light;
          }
        }
      }
    }
  }

  // Dark
  @if $dark {
    #{$dark-theme-selector} {
      #{$output-selector} {
        @if $enabled {
          @extend #{$input-selector}--enabled-dark;
        }

        @if $hover {
          &:hover {
            @extend #{$input-selector}--hover-dark;
          }
        }

        @if $active {
          &:active {
            @extend #{$input-selector}--active-dark;
          }
        }

        @if $disabled {
          &:disabled {
            @extend #{$input-selector}--disabled-dark;
          }
        }
      }
    }
  }
}

// Generate icons virtual selectors

/// It returns a list of virtual selectors. This function is designed to
/// process the icons selectors generated by "svg-sass-generator" package,
/// present in this monorepo. This function only generates one part of the
/// selector: %icon__{category-name}_{icon-name}. ie.: %icon__system_user.
/// Another mixin should then combine the selectors that this function provides
/// with the rest of the selector. Generally, the other part of the selector
/// includes the name of the icon state, and the name of the color scheme.
/// An example of a complete selector: %icon__system_user--primary-light.
/// @param {List} $icons-list - The list of icons
/// @param {String} $category - The category name of the list
/// @param {String} $prefix_category-separator - The prefix-category separator
/// @return {String} $category_icon-separator - The category-icon separator
@function generate-icons-virtual-selectors(
  $icons-list,
  $category,
  $prefix_category-separator: "__",
  $category_icon-separator: "_"
) {
  $output-list: ();
  @each $icon in $icons-list {
    $output-list: append(
      $output-list,
      "%icon#{$prefix_category-separator}#{$category}#{$category_icon-separator}#{$icon}"
    );
  }
  @return $output-list;
}
