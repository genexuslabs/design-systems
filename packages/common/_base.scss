@mixin button-common-styles() {
  display: inline-grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  justify-content: center;
}

@mixin label-common-styles() {
  display: inline-grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  grid-template-rows: auto; // Necessary to avoid creating additional rows and then adding additional gap at the bottom of the label
  align-items: center;
}

@mixin document-common-styles() {
  display: grid;
  grid-template-rows: 1fr;
  min-block-size: 100dvh;
  margin: 0;
}

// - - - - - - - - - - - - - - - - - - - -
//    Icons | Mask & Background
// - - - - - - - - - - - - - - - - - - - -

// Icon mask styles
@mixin icon-mask-common-styles(
  $inline-size: var(--icon-size),
  $block-size: var(--icon-size),
  $mask-size: var(--icon-mask-size)
) {
  content: "";
  display: block;
  inline-size: $inline-size;
  block-size: $block-size;
  -webkit-mask: no-repeat center / $mask-size var(--icon-path);
  background-color: currentColor;
}

/// @group Icon
/// @param {String} $selector [".icon-mask"] -
/// @param {type} $icon-path [null] -
@mixin icon-mask($selector: ".icon-mask", $icon-path: null) {
  #{$selector} {
    @if $icon-path != null {
      --icon-path: #{$icon-path};
    }

    &::before {
      @extend %icon-mask--before;
    }
  }
}

// Icon background styles
@mixin icon-background-common-styles(
  $inline-size: var(--icon-size),
  $block-size: var(--icon-size),
  $background-size: var(--icon-background-size)
) {
  content: "";
  display: block;
  inline-size: $inline-size;
  block-size: $block-size;
  background: no-repeat center / $background-size var(--icon-path);
}

/// @group Icon
/// @param {String} $selector [".icon-background"] -
/// @param {type} $icon-path [null] -
@mixin icon-background($selector: ".icon-background", $icon-path: null) {
  #{$selector} {
    @if $icon-path != null {
      --icon-path: #{$icon-path};
    }

    &::before {
      @extend %icon-background--before;
    }
  }
}

// Icon Input background styles
@mixin icon-input-background-common-styles(
  $background-size: "0",
  $background-position-x: "0"
) {
  background-repeat: no-repeat;
  background-position-y: center;
  background-position-x: #{$background-position-x};
  background-size: $background-size;
  background-image: var(--icon-path);
}

// - - - - - - - - - - - - - - - - - - - -
//     Icons | Multicolor Selectors
// - - - - - - - - - - - - - - - - - - - -

// Single selector generator
@mixin multicolor-icon-selector(
  $input-selector,
  $output-selector,
  $light: true,
  $dark: true,
  $light-theme-selector: ".light",
  $dark-theme-selector: ".dark",
  $primary: true,
  $primary-hover: true,
  $primary-active: true,
  $primary-disabled: true,
  $on-primary: true,
  $on-primary-hover: true,
  $on-primary-active: true,
  $on-disabled: true,
  $neutral: true
) {
  // Light
  @if $light {
    #{$light-theme-selector} {
      #{$output-selector} {
        @if $enabled {
          @extend #{$input-selector}--enabled-light;
        }

        @if $hover {
          &:hover {
            @extend #{$input-selector}--hover-light;
          }
        }

        @if $active {
          &:active {
            @extend #{$input-selector}--active-light;
          }
        }

        @if $disabled {
          &:disabled {
            @extend #{$input-selector}--disabled-light;
          }
        }
      }
    }
  }

  // Dark
  @if $dark {
    #{$dark-theme-selector} {
      #{$output-selector} {
        @if $enabled {
          @extend #{$input-selector}--enabled-dark;
        }

        @if $hover {
          &:hover {
            @extend #{$input-selector}--hover-dark;
          }
        }

        @if $active {
          &:active {
            @extend #{$input-selector}--active-dark;
          }
        }

        @if $disabled {
          &:disabled {
            @extend #{$input-selector}--disabled-dark;
          }
        }
      }
    }
  }
}

// Generate icons virtual selectors

/// It returns a list of virtual selectors. This function is designed to
/// process the icons selectors generated by "svg-sass-generator" package,
/// present in this monorepo. This function only generates one part of the
/// selector: %icon__{category-name}_{icon-name}. ie.: %icon__system_user.
/// Another mixin should then combine the selectors that this function provides
/// with the rest of the selector. Generally, the other part of the selector
/// includes the name of the icon state, and the name of the color scheme.
/// An example of a complete selector: %icon__system_user--primary-light.
/// @param {List} $icons-list - The list of icons
/// @param {String} $category - The category name of the list
/// @param {String} $prefix_category-separator - The prefix-category separator
/// @return {String} $category_icon-separator - The category-icon separator
@function generate-icons-virtual-selectors(
  $icons-list,
  $category,
  $prefix_category-separator: "__",
  $category_icon-separator: "_"
) {
  $output-list: ();
  @each $icon in $icons-list {
    $output-list: append(
      $output-list,
      "%icon#{$prefix_category-separator}#{$category}#{$category_icon-separator}#{$icon}"
    );
  }
  @return $output-list;
}
